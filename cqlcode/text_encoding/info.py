TEXT_DESCRIPTIONS = {
    "ant-medium-v2": {
        "description": "The ant is a 3D robot consisting of one torso (free rotational body) with four legs attached to it with each leg having two links. The goal is to coordinate the four legs to move in the forward (right) direction by applying torques on the eight hinges connecting the two links of each leg and the torso (nine parts and eight hinges).",
        "state": "z-coordinate of the torso (centre); x-orientation of the torso (centre); y-orientation of the torso (centre); z-orientation of the torso (centre); w-orientation of the torso (centre); angle between torso and first link on front left; angle between the two links on the front left; angle between torso and first link on front right; angle between the two links on the front right; angle between torso and first link on back left; angle between the two links on the back left; angle between torso and first link on back right; angle between the two links on the back right; x-coordinate velocity of the torso; y-coordinate velocity of the torso; z-coordinate velocity of the torso; x-coordinate angular velocity of the torso; y-coordinate angular velocity of the torso; z-coordinate angular velocity of the torso; angular velocity of angle between torso and front left link; angular velocity of the angle between front left links; angular velocity of angle between torso and front right link; angular velocity of the angle between front right links; angular velocity of angle between torso and back left link; angular velocity of the angle between back left links; angular velocity of angle between torso and back right link; angular velocity of the angle between back right links"
                    ,
        "action": "Torque applied on the rotor between the torso and front left hip; Torque applied on the rotor between the front left two link; Torque applied on the rotor between the torso and front right hi; Torque applied on the rotor between the front right two link; Torque applied on the rotor between the torso and back left hi; Torque applied on the rotor between the back left two link; Torque applied on the rotor between the torso and back right hi; Torque applied on the rotor between the back right two links"
                    ,
        "reward": ["healthy_reward: Every timestep that the ant is healthy, it gets a reward of fixed value healthy_reward", 
                    "forward_reward: A reward of moving forward which is measured as (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependent on the frame_skip parameter (default is 5), where the frametime is 0.01 - making the default dt = 5 * 0.01 = 0.05. This reward would be positive if the ant moves forward (in positive x direction).",
                    "ctrl_cost: A negative reward for penalising the ant if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctr_cost_weight is a parameter set for the control and has a default value of 0.5.",
                    "contact_cost: A negative reward for penalising the ant if the external contact force is too large. It is calculated contact_cost_weight * sum(clip(external contact force to contact_force_range) ^ 2).",
                    "The total reward returned is reward = healthy_reward + forward_reward - ctrl_cost - contact_cost and info will also contain the individual reward terms."],
        "other": [""] ## TODO: Add more here
    },
    "ant-medium-expert-v2": {
        "description": "The ant is a 3D robot consisting of one torso (free rotational body) with four legs attached to it with each leg having two links. The goal is to coordinate the four legs to move in the forward (right) direction by applying torques on the eight hinges connecting the two links of each leg and the torso (nine parts and eight hinges).",
        "state": "z-coordinate of the torso (centre); x-orientation of the torso (centre); y-orientation of the torso (centre); z-orientation of the torso (centre); w-orientation of the torso (centre); angle between torso and first link on front left; angle between the two links on the front left; angle between torso and first link on front right; angle between the two links on the front right; angle between torso and first link on back left; angle between the two links on the back left; angle between torso and first link on back right; angle between the two links on the back right; x-coordinate velocity of the torso; y-coordinate velocity of the torso; z-coordinate velocity of the torso; x-coordinate angular velocity of the torso; y-coordinate angular velocity of the torso; z-coordinate angular velocity of the torso; angular velocity of angle between torso and front left link; angular velocity of the angle between front left links; angular velocity of angle between torso and front right link; angular velocity of the angle between front right links; angular velocity of angle between torso and back left link; angular velocity of the angle between back left links; angular velocity of angle between torso and back right link; angular velocity of the angle between back right links"
                    ,
        "action": "Torque applied on the rotor between the torso and front left hip; Torque applied on the rotor between the front left two link; Torque applied on the rotor between the torso and front right hi; Torque applied on the rotor between the front right two link; Torque applied on the rotor between the torso and back left hi; Torque applied on the rotor between the back left two link; Torque applied on the rotor between the torso and back right hi; Torque applied on the rotor between the back right two links"
                    ,
        "reward": ["healthy_reward: Every timestep that the ant is healthy, it gets a reward of fixed value healthy_reward", 
                    "forward_reward: A reward of moving forward which is measured as (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependent on the frame_skip parameter (default is 5), where the frametime is 0.01 - making the default dt = 5 * 0.01 = 0.05. This reward would be positive if the ant moves forward (in positive x direction).",
                    "ctrl_cost: A negative reward for penalising the ant if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctr_cost_weight is a parameter set for the control and has a default value of 0.5.",
                    "contact_cost: A negative reward for penalising the ant if the external contact force is too large. It is calculated contact_cost_weight * sum(clip(external contact force to contact_force_range) ^ 2).",
                    "The total reward returned is reward = healthy_reward + forward_reward - ctrl_cost - contact_cost and info will also contain the individual reward terms."],
        "other": [""] ## TODO: Add more here
    },
    "ant-medium-replay-v2": {
        "description": "The ant is a 3D robot consisting of one torso (free rotational body) with four legs attached to it with each leg having two links. The goal is to coordinate the four legs to move in the forward (right) direction by applying torques on the eight hinges connecting the two links of each leg and the torso (nine parts and eight hinges).",
        "state": "z-coordinate of the torso (centre); x-orientation of the torso (centre); y-orientation of the torso (centre); z-orientation of the torso (centre); w-orientation of the torso (centre); angle between torso and first link on front left; angle between the two links on the front left; angle between torso and first link on front right; angle between the two links on the front right; angle between torso and first link on back left; angle between the two links on the back left; angle between torso and first link on back right; angle between the two links on the back right; x-coordinate velocity of the torso; y-coordinate velocity of the torso; z-coordinate velocity of the torso; x-coordinate angular velocity of the torso; y-coordinate angular velocity of the torso; z-coordinate angular velocity of the torso; angular velocity of angle between torso and front left link; angular velocity of the angle between front left links; angular velocity of angle between torso and front right link; angular velocity of the angle between front right links; angular velocity of angle between torso and back left link; angular velocity of the angle between back left links; angular velocity of angle between torso and back right link; angular velocity of the angle between back right links"
                    ,
        "action": "Torque applied on the rotor between the torso and front left hip; Torque applied on the rotor between the front left two link; Torque applied on the rotor between the torso and front right hi; Torque applied on the rotor between the front right two link; Torque applied on the rotor between the torso and back left hi; Torque applied on the rotor between the back left two link; Torque applied on the rotor between the torso and back right hi; Torque applied on the rotor between the back right two links"
                    ,
        "reward": ["healthy_reward: Every timestep that the ant is healthy, it gets a reward of fixed value healthy_reward", 
                    "forward_reward: A reward of moving forward which is measured as (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependent on the frame_skip parameter (default is 5), where the frametime is 0.01 - making the default dt = 5 * 0.01 = 0.05. This reward would be positive if the ant moves forward (in positive x direction).",
                    "ctrl_cost: A negative reward for penalising the ant if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctr_cost_weight is a parameter set for the control and has a default value of 0.5.",
                    "contact_cost: A negative reward for penalising the ant if the external contact force is too large. It is calculated contact_cost_weight * sum(clip(external contact force to contact_force_range) ^ 2).",
                    "The total reward returned is reward = healthy_reward + forward_reward - ctrl_cost - contact_cost."],
        "other": [""] ## TODO: Add more here
    },
    "halfcheetah-medium-v2":{
        "description": "The HalfCheetah is a 2-dimensional robot consisting of 9 links and 8 joints connecting them (including two paws). The goal is to apply a torque on the joints to make the cheetah run forward (right) as fast as possible, with a positive reward allocated based on the distance moved forward and a negative reward allocated for moving backward. The torso and head of the cheetah are fixed, and the torque can only be applied on the other 6 joints over the front and back thighs (connecting to the torso), shins (connecting to the thighs) and feet (connecting to the shins).",
        "state": "z-coordinate of the front tip; angle of the front tip; angle of the back thigh rotor; angle of the back shin rotor; angle of the back foot rotor; angle of the front thigh rotor; angle of the front shin rotor; angle of the front foot rotor; velocity of the tip along the x-axis; velocity of the tip along the z-axis; angular velocity of the front tip; angular velocity of the back thigh motor; angular velocity of the back shin motor; angular velocity of the back foot motor; angular velocity of the front thigh motor; angular velocity of the front shin motor; angular velocity of the front foot motor"
                    ,
        "action": "Torque applied on the back thigh rotor; Torque applied on the back shin rotor; Torque applied on the back foot rotor; Torque applied on the front thigh rotor; Torque applied on the front shin rotor; Torque applied on the front foot rotor"
                    ,
        "reward": ["forward_reward: A reward of moving forward which is measured as forward_reward_weight * (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependent on the frame_skip parameter (fixed to 5), where the frametime is 0.01 - making the default dt = 5 * 0.01 = 0.05. This reward would be positive if the cheetah runs forward (right).", 
                    "ctrl_cost: A cost for penalising the cheetah if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctrl_cost_weight is a parameter set for the control and has a default value of 0.1.",
                    "The total reward returned is reward = forward_reward - ctrl_cost."],
        "other": [""] ## TODO: Add more here
    },
    "halfcheetah-medium-expert-v2":{
        "description": "The HalfCheetah is a 2-dimensional robot consisting of 9 links and 8 joints connecting them (including two paws). The goal is to apply a torque on the joints to make the cheetah run forward (right) as fast as possible, with a positive reward allocated based on the distance moved forward and a negative reward allocated for moving backward. The torso and head of the cheetah are fixed, and the torque can only be applied on the other 6 joints over the front and back thighs (connecting to the torso), shins (connecting to the thighs) and feet (connecting to the shins).",
        "state": "z-coordinate of the front tip; angle of the front tip; angle of the back thigh rotor; angle of the back shin rotor; angle of the back foot rotor; angle of the front thigh rotor; angle of the front shin rotor; angle of the front foot rotor; velocity of the tip along the x-axis; velocity of the tip along the z-axis; angular velocity of the front tip; angular velocity of the back thigh motor; angular velocity of the back shin motor; angular velocity of the back foot motor; angular velocity of the front thigh motor; angular velocity of the front shin motor; angular velocity of the front foot motor"
                    ,
        "action": "Torque applied on the back thigh rotor; Torque applied on the back shin rotor; Torque applied on the back foot rotor; Torque applied on the front thigh rotor; Torque applied on the front shin rotor; Torque applied on the front foot rotor"
                    ,
        "reward": ["forward_reward: A reward of moving forward which is measured as forward_reward_weight * (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependent on the frame_skip parameter (fixed to 5), where the frametime is 0.01 - making the default dt = 5 * 0.01 = 0.05. This reward would be positive if the cheetah runs forward (right).", 
                    "ctrl_cost: A cost for penalising the cheetah if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctrl_cost_weight is a parameter set for the control and has a default value of 0.1.",
                    "The total reward returned is reward = forward_reward - ctrl_cost."],
        "other": [""] ## TODO: Add more here
    },
    "halfcheetah-medium-replay-v2":{
        "description": "The HalfCheetah is a 2-dimensional robot consisting of 9 links and 8 joints connecting them (including two paws). The goal is to apply a torque on the joints to make the cheetah run forward (right) as fast as possible, with a positive reward allocated based on the distance moved forward and a negative reward allocated for moving backward. The torso and head of the cheetah are fixed, and the torque can only be applied on the other 6 joints over the front and back thighs (connecting to the torso), shins (connecting to the thighs) and feet (connecting to the shins).",
        "state": "z-coordinate of the front tip; angle of the front tip; angle of the back thigh rotor; angle of the back shin rotor; angle of the back foot rotor; angle of the front thigh rotor; angle of the front shin rotor; angle of the front foot rotor; velocity of the tip along the x-axis; velocity of the tip along the z-axis; angular velocity of the front tip; angular velocity of the back thigh motor; angular velocity of the back shin motor; angular velocity of the back foot motor; angular velocity of the front thigh motor; angular velocity of the front shin motor; angular velocity of the front foot motor"
                    ,
        "action": "Torque applied on the back thigh rotor; Torque applied on the back shin rotor; Torque applied on the back foot rotor; Torque applied on the front thigh rotor; Torque applied on the front shin rotor; Torque applied on the front foot rotor"
                    ,
        "reward": ["forward_reward: A reward of moving forward which is measured as forward_reward_weight * (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependent on the frame_skip parameter (fixed to 5), where the frametime is 0.01 - making the default dt = 5 * 0.01 = 0.05. This reward would be positive if the cheetah runs forward (right).", 
                    "ctrl_cost: A cost for penalising the cheetah if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctrl_cost_weight is a parameter set for the control and has a default value of 0.1.",
                    "The total reward returned is reward = forward_reward - ctrl_cost."],
        "other": [""] ## TODO: Add more here
    },
    "hopper-medium-v2":{
        "description": "The hopper is a two-dimensional one-legged figure that consist of four main body parts - the torso at the top, the thigh in the middle, the leg in the bottom, and a single foot on which the entire body rests. The goal is to make hops that move in the forward (right) direction by applying torques on the three hinges connecting the four body parts.",
        "state": "z-coordinate of the torso (height of hopper); angle of the torso; angle of the thigh joint; angle of the leg joint; angle of the foot joint; velocity of the x-coordinate of the torso; velocity of the z-coordinate (height) of the torso; angular velocity of the angle of the torso; angular velocity of the thigh hinge; angular velocity of the leg hinge; angular velocity of the foot hinge"
                    ,
        "action": "Torque applied on the thigh rotor; Torque applied on the leg rotor; Torque applied on the foot rotor"
                    ,
        "reward": ["healthy_reward: Every timestep that the hopper is healthy, it gets a reward of fixed value healthy_reward.", 
                    "forward_reward: A reward of hopping forward which is measured as forward_reward_weight * (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependent on the frame_skip parameter (fixed to 4), where the frametime is 0.002 - making the default dt = 4 * 0.002 = 0.008. This reward would be positive if the hopper hops forward (positive x direction).",
                    "ctrl_cost: A cost for penalising the hopper if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctrl_cost_weight is a parameter set for the control and has a default value of 0.001.",
                    "The total reward returned is reward = healthy_reward + forward_reward - ctrl_cost."],
        "other": [""] ## TODO: Add more here
    },
    "hopper-medium-expert-v2":{
        "description": "The hopper is a two-dimensional one-legged figure that consist of four main body parts - the torso at the top, the thigh in the middle, the leg in the bottom, and a single foot on which the entire body rests. The goal is to make hops that move in the forward (right) direction by applying torques on the three hinges connecting the four body parts.",
        "state": "z-coordinate of the torso (height of hopper); angle of the torso; angle of the thigh joint; angle of the leg joint; angle of the foot joint; velocity of the x-coordinate of the torso; velocity of the z-coordinate (height) of the torso; angular velocity of the angle of the torso; angular velocity of the thigh hinge; angular velocity of the leg hinge; angular velocity of the foot hinge"
                    ,
        "action": "Torque applied on the thigh rotor; Torque applied on the leg rotor; Torque applied on the foot rotor"
                    ,
        "reward": ["healthy_reward: Every timestep that the hopper is healthy, it gets a reward of fixed value healthy_reward.", 
                    "forward_reward: A reward of hopping forward which is measured as forward_reward_weight * (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependent on the frame_skip parameter (fixed to 4), where the frametime is 0.002 - making the default dt = 4 * 0.002 = 0.008. This reward would be positive if the hopper hops forward (positive x direction).",
                    "ctrl_cost: A cost for penalising the hopper if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctrl_cost_weight is a parameter set for the control and has a default value of 0.001.",
                    "The total reward returned is reward = healthy_reward + forward_reward - ctrl_cost."],
        "other": [""] ## TODO: Add more here
    },
    "hopper-medium-replay-v2":{
        "description": "The hopper is a two-dimensional one-legged figure that consist of four main body parts - the torso at the top, the thigh in the middle, the leg in the bottom, and a single foot on which the entire body rests. The goal is to make hops that move in the forward (right) direction by applying torques on the three hinges connecting the four body parts.",
        "state": "z-coordinate of the torso (height of hopper); angle of the torso; angle of the thigh joint; angle of the leg joint; angle of the foot joint; velocity of the x-coordinate of the torso; velocity of the z-coordinate (height) of the torso; angular velocity of the angle of the torso; angular velocity of the thigh hinge; angular velocity of the leg hinge; angular velocity of the foot hinge"
                    ,
        "action": "Torque applied on the thigh rotor; Torque applied on the leg rotor; Torque applied on the foot rotor"
                    ,
        "reward": ["healthy_reward: Every timestep that the hopper is healthy, it gets a reward of fixed value healthy_reward.", 
                    "forward_reward: A reward of hopping forward which is measured as forward_reward_weight * (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependent on the frame_skip parameter (fixed to 4), where the frametime is 0.002 - making the default dt = 4 * 0.002 = 0.008. This reward would be positive if the hopper hops forward (positive x direction).",
                    "ctrl_cost: A cost for penalising the hopper if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctrl_cost_weight is a parameter set for the control and has a default value of 0.001.",
                    "The total reward returned is reward = healthy_reward + forward_reward - ctrl_cost."],
        "other": [""] ## TODO: Add more here
    },
    "walker2d-medium-v2":{
        "description": "The walker is a two-dimensional two-legged figure that consist of seven main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to walk in the in the forward (right) direction by applying torques on the six hinges connecting the seven body parts.",
        "state": "z-coordinate of the torso (height of Walker2d); angle of the torso; angle of the thigh joint; angle of the leg joint; angle of the foot joint; angle of the left thigh joint; angle of the left leg joint; angle of the left foot joint; velocity of the x-coordinate of the torso; velocity of the z-coordinate (height) of the torso; angular velocity of the angle of the torso; angular velocity of the thigh hinge; angular velocity of the leg hinge; angular velocity of the foot hinge; angular velocity of the left left thigh hinge; angular velocity of the left leg hinge; angular velocity of the left foot hinge"
                    ,
        "action": "Torque applied on the thigh rotor; Torque applied on the leg rotor; Torque applied on the foot rotor; Torque applied on the left thigh rotor; Torque applied on the left leg rotor; Torque applied on the left foot rotor"
                    ,
        "reward": ["healthy_reward: Every timestep that the walker is alive, it receives a fixed reward of value healthy_reward.",
                    "forward_reward: A reward of walking forward which is measured as forward_reward_weight * (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependeent on the frame_skip parameter (default is 4), where the frametime is 0.002 - making the default dt = 4 * 0.002 = 0.008. This reward would be positive if the walker walks forward (positive x direction).",
                    "ctrl_cost: A cost for penalising the walker if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctrl_cost_weight is a parameter set for the control and has a default value of 0.001.",
                    "The total reward returned is reward = healthy_reward bonus + forward_reward - ctrl_cost."],
        "other": [""] ## TODO: Add more here
    },
    "walker2d-medium-expert-v2":{
        "description": "The walker is a two-dimensional two-legged figure that consist of seven main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to walk in the in the forward (right) direction by applying torques on the six hinges connecting the seven body parts.",
        "state": "z-coordinate of the torso (height of Walker2d); angle of the torso; angle of the thigh joint; angle of the leg joint; angle of the foot joint; angle of the left thigh joint; angle of the left leg joint; angle of the left foot joint; velocity of the x-coordinate of the torso; velocity of the z-coordinate (height) of the torso; angular velocity of the angle of the torso; angular velocity of the thigh hinge; angular velocity of the leg hinge; angular velocity of the foot hinge; angular velocity of the left left thigh hinge; angular velocity of the left leg hinge; angular velocity of the left foot hinge"
                    ,
        "action": "Torque applied on the thigh rotor; Torque applied on the leg rotor; Torque applied on the foot rotor; Torque applied on the left thigh rotor; Torque applied on the left leg rotor; Torque applied on the left foot rotor"
                    ,
        "reward": ["healthy_reward: Every timestep that the walker is alive, it receives a fixed reward of value healthy_reward.",
                    "forward_reward: A reward of walking forward which is measured as forward_reward_weight * (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependeent on the frame_skip parameter (default is 4), where the frametime is 0.002 - making the default dt = 4 * 0.002 = 0.008. This reward would be positive if the walker walks forward (positive x direction).",
                    "ctrl_cost: A cost for penalising the walker if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctrl_cost_weight is a parameter set for the control and has a default value of 0.001.",
                    "The total reward returned is reward = healthy_reward bonus + forward_reward - ctrl_cost."],
        "other": [""] ## TODO: Add more here
    },
    "walker2d-medium-replay-v2":{
        "description": "The walker is a two-dimensional two-legged figure that consist of seven main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to walk in the in the forward (right) direction by applying torques on the six hinges connecting the seven body parts.",
        "state": "z-coordinate of the torso (height of Walker2d); angle of the torso; angle of the thigh joint; angle of the leg joint; angle of the foot joint; angle of the left thigh joint; angle of the left leg joint; angle of the left foot joint; velocity of the x-coordinate of the torso; velocity of the z-coordinate (height) of the torso; angular velocity of the angle of the torso; angular velocity of the thigh hinge; angular velocity of the leg hinge; angular velocity of the foot hinge; angular velocity of the left left thigh hinge; angular velocity of the left leg hinge; angular velocity of the left foot hinge"
                    ,
        "action": "Torque applied on the thigh rotor; Torque applied on the leg rotor; Torque applied on the foot rotor; Torque applied on the left thigh rotor; Torque applied on the left leg rotor; Torque applied on the left foot rotor"
                    ,
        "reward": ["healthy_reward: Every timestep that the walker is alive, it receives a fixed reward of value healthy_reward.",
                    "forward_reward: A reward of walking forward which is measured as forward_reward_weight * (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependeent on the frame_skip parameter (default is 4), where the frametime is 0.002 - making the default dt = 4 * 0.002 = 0.008. This reward would be positive if the walker walks forward (positive x direction).",
                    "ctrl_cost: A cost for penalising the walker if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctrl_cost_weight is a parameter set for the control and has a default value of 0.001.",
                    "The total reward returned is reward = healthy_reward bonus + forward_reward - ctrl_cost."],
        "other": [""] ## TODO: Add more here
    },
}


TEXT_DESCRIPTIONS_PER_DIM = {
    "ant-medium-v2": {
        "description": "The ant is a 3D robot consisting of one torso (free rotational body) with four legs attached to it with each leg having two links. The goal is to coordinate the four legs to move in the forward (right) direction by applying torques on the eight hinges connecting the two links of each leg and the torso (nine parts and eight hinges).",
        "state": ["z-coordinate of the torso (centre)", 
                    "x-orientation of the torso (centre)", 
                    "y-orientation of the torso (centre)", 
                    "z-orientation of the torso (centre)", 
                    "w-orientation of the torso (centre)", 
                    "angle between torso and first link on front left", 
                    "angle between the two links on the front left", 
                    "angle between torso and first link on front right", 
                    "angle between the two links on the front right", 
                    "angle between torso and first link on back left", 
                    "angle between the two links on the back left", 
                    "angle between torso and first link on back right", 
                    "angle between the two links on the back right", 
                    "x-coordinate velocity of the torso", 
                    "y-coordinate velocity of the torso", 
                    "z-coordinate velocity of the torso", 
                    "x-coordinate angular velocity of the torso", 
                    "y-coordinate angular velocity of the torso", 
                    "z-coordinate angular velocity of the torso", 
                    "angular velocity of angle between torso and front left link", 
                    "angular velocity of the angle between front left links", 
                    "angular velocity of angle between torso and front right link", 
                    "angular velocity of the angle between front right links", 
                    "angular velocity of angle between torso and back left link", 
                    "angular velocity of the angle between back left links", 
                    "angular velocity of angle between torso and back right link", 
                    "angular velocity of the angle between back right links"
                    ],
        "action": ["Torque applied on the rotor between the torso and front left hip.", 
                    "Torque applied on the rotor between the front left two links", 
                    "Torque applied on the rotor between the torso and front right hip", 
                    "Torque applied on the rotor between the front right two links", 
                    "Torque applied on the rotor between the torso and back left hip", 
                    "Torque applied on the rotor between the back left two links", 
                    "Torque applied on the rotor between the torso and back right hip", 
                    "Torque applied on the rotor between the back right two links"
                    ],
        "reward": ["healthy_reward: Every timestep that the ant is healthy, it gets a reward of fixed value healthy_reward", 
                    "forward_reward: A reward of moving forward which is measured as (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependent on the frame_skip parameter (default is 5), where the frametime is 0.01 - making the default dt = 5 * 0.01 = 0.05. This reward would be positive if the ant moves forward (in positive x direction).",
                    "ctrl_cost: A negative reward for penalising the ant if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctr_cost_weight is a parameter set for the control and has a default value of 0.5.",
                    "contact_cost: A negative reward for penalising the ant if the external contact force is too large. It is calculated contact_cost_weight * sum(clip(external contact force to contact_force_range) ^ 2).",
                    "The total reward returned is reward = healthy_reward + forward_reward - ctrl_cost - contact_cost and info will also contain the individual reward terms."],
        "other": [""] ## TODO: Add more here
    },
    "ant-medium-expert-v2": {
        "description": "The ant is a 3D robot consisting of one torso (free rotational body) with four legs attached to it with each leg having two links. The goal is to coordinate the four legs to move in the forward (right) direction by applying torques on the eight hinges connecting the two links of each leg and the torso (nine parts and eight hinges).",
        "state": ["z-coordinate of the torso (centre)", 
                    "x-orientation of the torso (centre)", 
                    "y-orientation of the torso (centre)", 
                    "z-orientation of the torso (centre)", 
                    "w-orientation of the torso (centre)", 
                    "angle between torso and first link on front left", 
                    "angle between the two links on the front left", 
                    "angle between torso and first link on front right", 
                    "angle between the two links on the front right", 
                    "angle between torso and first link on back left", 
                    "angle between the two links on the back left", 
                    "angle between torso and first link on back right", 
                    "angle between the two links on the back right", 
                    "x-coordinate velocity of the torso", 
                    "y-coordinate velocity of the torso", 
                    "z-coordinate velocity of the torso", 
                    "x-coordinate angular velocity of the torso", 
                    "y-coordinate angular velocity of the torso", 
                    "z-coordinate angular velocity of the torso", 
                    "angular velocity of angle between torso and front left link", 
                    "angular velocity of the angle between front left links", 
                    "angular velocity of angle between torso and front right link", 
                    "angular velocity of the angle between front right links", 
                    "angular velocity of angle between torso and back left link", 
                    "angular velocity of the angle between back left links", 
                    "angular velocity of angle between torso and back right link", 
                    "angular velocity of the angle between back right links"
                    ],
        "action": ["Torque applied on the rotor between the torso and front left hip.", 
                    "Torque applied on the rotor between the front left two links", 
                    "Torque applied on the rotor between the torso and front right hip", 
                    "Torque applied on the rotor between the front right two links", 
                    "Torque applied on the rotor between the torso and back left hip", 
                    "Torque applied on the rotor between the back left two links", 
                    "Torque applied on the rotor between the torso and back right hip", 
                    "Torque applied on the rotor between the back right two links"
                    ],
        "reward": ["healthy_reward: Every timestep that the ant is healthy, it gets a reward of fixed value healthy_reward", 
                    "forward_reward: A reward of moving forward which is measured as (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependent on the frame_skip parameter (default is 5), where the frametime is 0.01 - making the default dt = 5 * 0.01 = 0.05. This reward would be positive if the ant moves forward (in positive x direction).",
                    "ctrl_cost: A negative reward for penalising the ant if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctr_cost_weight is a parameter set for the control and has a default value of 0.5.",
                    "contact_cost: A negative reward for penalising the ant if the external contact force is too large. It is calculated contact_cost_weight * sum(clip(external contact force to contact_force_range) ^ 2).",
                    "The total reward returned is reward = healthy_reward + forward_reward - ctrl_cost - contact_cost and info will also contain the individual reward terms."],
        "other": [""] ## TODO: Add more here
    },
    "ant-medium-replay-v2": {
        "description": "The ant is a 3D robot consisting of one torso (free rotational body) with four legs attached to it with each leg having two links. The goal is to coordinate the four legs to move in the forward (right) direction by applying torques on the eight hinges connecting the two links of each leg and the torso (nine parts and eight hinges).",
        "state": ["z-coordinate of the torso (centre)", 
                    "x-orientation of the torso (centre)", 
                    "y-orientation of the torso (centre)", 
                    "z-orientation of the torso (centre)", 
                    "w-orientation of the torso (centre)", 
                    "angle between torso and first link on front left", 
                    "angle between the two links on the front left", 
                    "angle between torso and first link on front right", 
                    "angle between the two links on the front right", 
                    "angle between torso and first link on back left", 
                    "angle between the two links on the back left", 
                    "angle between torso and first link on back right", 
                    "angle between the two links on the back right", 
                    "x-coordinate velocity of the torso", 
                    "y-coordinate velocity of the torso", 
                    "z-coordinate velocity of the torso", 
                    "x-coordinate angular velocity of the torso", 
                    "y-coordinate angular velocity of the torso", 
                    "z-coordinate angular velocity of the torso", 
                    "angular velocity of angle between torso and front left link", 
                    "angular velocity of the angle between front left links", 
                    "angular velocity of angle between torso and front right link", 
                    "angular velocity of the angle between front right links", 
                    "angular velocity of angle between torso and back left link", 
                    "angular velocity of the angle between back left links", 
                    "angular velocity of angle between torso and back right link", 
                    "angular velocity of the angle between back right links"
                    ],
        "action": ["Torque applied on the rotor between the torso and front left hip.", 
                    "Torque applied on the rotor between the front left two links", 
                    "Torque applied on the rotor between the torso and front right hip", 
                    "Torque applied on the rotor between the front right two links", 
                    "Torque applied on the rotor between the torso and back left hip", 
                    "Torque applied on the rotor between the back left two links", 
                    "Torque applied on the rotor between the torso and back right hip", 
                    "Torque applied on the rotor between the back right two links"
                    ],
        "reward": ["healthy_reward: Every timestep that the ant is healthy, it gets a reward of fixed value healthy_reward", 
                    "forward_reward: A reward of moving forward which is measured as (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependent on the frame_skip parameter (default is 5), where the frametime is 0.01 - making the default dt = 5 * 0.01 = 0.05. This reward would be positive if the ant moves forward (in positive x direction).",
                    "ctrl_cost: A negative reward for penalising the ant if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctr_cost_weight is a parameter set for the control and has a default value of 0.5.",
                    "contact_cost: A negative reward for penalising the ant if the external contact force is too large. It is calculated contact_cost_weight * sum(clip(external contact force to contact_force_range) ^ 2).",
                    "The total reward returned is reward = healthy_reward + forward_reward - ctrl_cost - contact_cost."],
        "other": [""] ## TODO: Add more here
    },
    "halfcheetah-medium-v2":{
        "description": "The HalfCheetah is a 2-dimensional robot consisting of 9 links and 8 joints connecting them (including two paws). The goal is to apply a torque on the joints to make the cheetah run forward (right) as fast as possible, with a positive reward allocated based on the distance moved forward and a negative reward allocated for moving backward. The torso and head of the cheetah are fixed, and the torque can only be applied on the other 6 joints over the front and back thighs (connecting to the torso), shins (connecting to the thighs) and feet (connecting to the shins).",
        "state": ["z-coordinate of the front tip", 
                    "angle of the front tip", 
                    "angle of the back thigh rotor", 
                    "angle of the back shin rotor", 
                    "angle of the back foot rotor", 
                    "angle of the front thigh rotor", 
                    "angle of the front shin rotor", 
                    "angle of the front foot rotor", # some modification since the documentation is a mess
                    "velocity of the tip along the x-axis", 
                    "velocity of the tip along the z-axis",
                    "angular velocity of the front tip",
                    "angular velocity of the back thigh motor",
                    "angular velocity of the back shin motor",
                    "angular velocity of the back foot motor",
                    "angular velocity of the front thigh motor",
                    "angular velocity of the front shin motor",
                    "angular velocity of the front foot motor",
                    ],
        "action": ["Torque applied on the back thigh rotor", 
                    "Torque applied on the back shin rotor", 
                    "Torque applied on the back foot rotor", 
                    "Torque applied on the front thigh rotor", 
                    "Torque applied on the front shin rotor", 
                    "Torque applied on the front foot rotor", 
                    ],
        "reward": ["forward_reward: A reward of moving forward which is measured as forward_reward_weight * (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependent on the frame_skip parameter (fixed to 5), where the frametime is 0.01 - making the default dt = 5 * 0.01 = 0.05. This reward would be positive if the cheetah runs forward (right).", 
                    "ctrl_cost: A cost for penalising the cheetah if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctrl_cost_weight is a parameter set for the control and has a default value of 0.1.",
                    "The total reward returned is reward = forward_reward - ctrl_cost."],
        "other": [""] ## TODO: Add more here
    },
    "halfcheetah-medium-expert-v2":{
        "description": "The HalfCheetah is a 2-dimensional robot consisting of 9 links and 8 joints connecting them (including two paws). The goal is to apply a torque on the joints to make the cheetah run forward (right) as fast as possible, with a positive reward allocated based on the distance moved forward and a negative reward allocated for moving backward. The torso and head of the cheetah are fixed, and the torque can only be applied on the other 6 joints over the front and back thighs (connecting to the torso), shins (connecting to the thighs) and feet (connecting to the shins).",
        "state": ["z-coordinate of the front tip", 
                    "angle of the front tip", 
                    "angle of the back thigh rotor", 
                    "angle of the back shin rotor", 
                    "angle of the back foot rotor", 
                    "angle of the front thigh rotor", 
                    "angle of the front shin rotor", 
                    "angle of the front foot rotor", # some modification since the documentation is a mess
                    "velocity of the tip along the x-axis", 
                    "velocity of the tip along the z-axis",
                    "angular velocity of the front tip",
                    "angular velocity of the back thigh motor",
                    "angular velocity of the back shin motor",
                    "angular velocity of the back foot motor",
                    "angular velocity of the front thigh motor",
                    "angular velocity of the front shin motor",
                    "angular velocity of the front foot motor",
                    ],
        "action": ["Torque applied on the back thigh rotor", 
                    "Torque applied on the back shin rotor", 
                    "Torque applied on the back foot rotor", 
                    "Torque applied on the front thigh rotor", 
                    "Torque applied on the front shin rotor", 
                    "Torque applied on the front foot rotor", 
                    ],
        "reward": ["forward_reward: A reward of moving forward which is measured as forward_reward_weight * (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependent on the frame_skip parameter (fixed to 5), where the frametime is 0.01 - making the default dt = 5 * 0.01 = 0.05. This reward would be positive if the cheetah runs forward (right).", 
                    "ctrl_cost: A cost for penalising the cheetah if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctrl_cost_weight is a parameter set for the control and has a default value of 0.1.",
                    "The total reward returned is reward = forward_reward - ctrl_cost."],
        "other": [""] ## TODO: Add more here
    },
    "halfcheetah-medium-replay-v2":{
        "description": "The HalfCheetah is a 2-dimensional robot consisting of 9 links and 8 joints connecting them (including two paws). The goal is to apply a torque on the joints to make the cheetah run forward (right) as fast as possible, with a positive reward allocated based on the distance moved forward and a negative reward allocated for moving backward. The torso and head of the cheetah are fixed, and the torque can only be applied on the other 6 joints over the front and back thighs (connecting to the torso), shins (connecting to the thighs) and feet (connecting to the shins).",
        "state": ["z-coordinate of the front tip", 
                    "angle of the front tip", 
                    "angle of the back thigh rotor", 
                    "angle of the back shin rotor", 
                    "angle of the back foot rotor", 
                    "angle of the front thigh rotor", 
                    "angle of the front shin rotor", 
                    "angle of the front foot rotor", # some modification since the documentation is a mess
                    "velocity of the tip along the x-axis", 
                    "velocity of the tip along the z-axis",
                    "angular velocity of the front tip",
                    "angular velocity of the back thigh motor",
                    "angular velocity of the back shin motor",
                    "angular velocity of the back foot motor",
                    "angular velocity of the front thigh motor",
                    "angular velocity of the front shin motor",
                    "angular velocity of the front foot motor",
                    ],
        "action": ["Torque applied on the back thigh rotor", 
                    "Torque applied on the back shin rotor", 
                    "Torque applied on the back foot rotor", 
                    "Torque applied on the front thigh rotor", 
                    "Torque applied on the front shin rotor", 
                    "Torque applied on the front foot rotor", 
                    ],
        "reward": ["forward_reward: A reward of moving forward which is measured as forward_reward_weight * (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependent on the frame_skip parameter (fixed to 5), where the frametime is 0.01 - making the default dt = 5 * 0.01 = 0.05. This reward would be positive if the cheetah runs forward (right).", 
                    "ctrl_cost: A cost for penalising the cheetah if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctrl_cost_weight is a parameter set for the control and has a default value of 0.1.",
                    "The total reward returned is reward = forward_reward - ctrl_cost."],
        "other": [""] ## TODO: Add more here
    },
    "hopper-medium-v2":{
        "description": "The hopper is a two-dimensional one-legged figure that consist of four main body parts - the torso at the top, the thigh in the middle, the leg in the bottom, and a single foot on which the entire body rests. The goal is to make hops that move in the forward (right) direction by applying torques on the three hinges connecting the four body parts.",
        "state": ["z-coordinate of the torso (height of hopper)", 
                    "angle of the torso", 
                    "angle of the thigh joint", 
                    "angle of the leg joint", 
                    "angle of the foot joint", 
                    "velocity of the x-coordinate of the torso", 
                    "velocity of the z-coordinate (height) of the torso", 
                    "angular velocity of the angle of the torso",
                    "angular velocity of the thigh hinge", 
                    "angular velocity of the leg hinge",
                    "angular velocity of the foot hinge",
                    ],
        "action": ["Torque applied on the thigh rotor", 
                    "Torque applied on the leg rotor", 
                    "Torque applied on the foot rotor", 
                    ],
        "reward": ["healthy_reward: Every timestep that the hopper is healthy, it gets a reward of fixed value healthy_reward.", 
                    "forward_reward: A reward of hopping forward which is measured as forward_reward_weight * (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependent on the frame_skip parameter (fixed to 4), where the frametime is 0.002 - making the default dt = 4 * 0.002 = 0.008. This reward would be positive if the hopper hops forward (positive x direction).",
                    "ctrl_cost: A cost for penalising the hopper if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctrl_cost_weight is a parameter set for the control and has a default value of 0.001.",
                    "The total reward returned is reward = healthy_reward + forward_reward - ctrl_cost."],
        "other": [""] ## TODO: Add more here
    },
    "hopper-medium-expert-v2":{
        "description": "The hopper is a two-dimensional one-legged figure that consist of four main body parts - the torso at the top, the thigh in the middle, the leg in the bottom, and a single foot on which the entire body rests. The goal is to make hops that move in the forward (right) direction by applying torques on the three hinges connecting the four body parts.",
        "state": ["z-coordinate of the torso (height of hopper)", 
                    "angle of the torso", 
                    "angle of the thigh joint", 
                    "angle of the leg joint", 
                    "angle of the foot joint", 
                    "velocity of the x-coordinate of the torso", 
                    "velocity of the z-coordinate (height) of the torso", 
                    "angular velocity of the angle of the torso",
                    "angular velocity of the thigh hinge", 
                    "angular velocity of the leg hinge",
                    "angular velocity of the foot hinge",
                    ],
        "action": ["Torque applied on the thigh rotor", 
                    "Torque applied on the leg rotor", 
                    "Torque applied on the foot rotor", 
                    ],
        "reward": ["healthy_reward: Every timestep that the hopper is healthy, it gets a reward of fixed value healthy_reward.", 
                    "forward_reward: A reward of hopping forward which is measured as forward_reward_weight * (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependent on the frame_skip parameter (fixed to 4), where the frametime is 0.002 - making the default dt = 4 * 0.002 = 0.008. This reward would be positive if the hopper hops forward (positive x direction).",
                    "ctrl_cost: A cost for penalising the hopper if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctrl_cost_weight is a parameter set for the control and has a default value of 0.001.",
                    "The total reward returned is reward = healthy_reward + forward_reward - ctrl_cost."],
        "other": [""] ## TODO: Add more here
    },
    "hopper-medium-replay-v2":{
        "description": "The hopper is a two-dimensional one-legged figure that consist of four main body parts - the torso at the top, the thigh in the middle, the leg in the bottom, and a single foot on which the entire body rests. The goal is to make hops that move in the forward (right) direction by applying torques on the three hinges connecting the four body parts.",
        "state": ["z-coordinate of the torso (height of hopper)", 
                    "angle of the torso", 
                    "angle of the thigh joint", 
                    "angle of the leg joint", 
                    "angle of the foot joint", 
                    "velocity of the x-coordinate of the torso", 
                    "velocity of the z-coordinate (height) of the torso", 
                    "angular velocity of the angle of the torso",
                    "angular velocity of the thigh hinge", 
                    "angular velocity of the leg hinge",
                    "angular velocity of the foot hinge",
                    ],
        "action": ["Torque applied on the thigh rotor", 
                    "Torque applied on the leg rotor", 
                    "Torque applied on the foot rotor", 
                    ],
        "reward": ["healthy_reward: Every timestep that the hopper is healthy, it gets a reward of fixed value healthy_reward.", 
                    "forward_reward: A reward of hopping forward which is measured as forward_reward_weight * (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependent on the frame_skip parameter (fixed to 4), where the frametime is 0.002 - making the default dt = 4 * 0.002 = 0.008. This reward would be positive if the hopper hops forward (positive x direction).",
                    "ctrl_cost: A cost for penalising the hopper if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctrl_cost_weight is a parameter set for the control and has a default value of 0.001.",
                    "The total reward returned is reward = healthy_reward + forward_reward - ctrl_cost."],
        "other": [""] ## TODO: Add more here
    },
    "walker2d-medium-v2":{
        "description": "The walker is a two-dimensional two-legged figure that consist of seven main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to walk in the in the forward (right) direction by applying torques on the six hinges connecting the seven body parts.",
        "state": ["z-coordinate of the torso (height of Walker2d)", 
                    "angle of the torso", 
                    "angle of the thigh joint", 
                    "angle of the leg joint", 
                    "angle of the foot joint", 
                    "angle of the left thigh joint", 
                    "angle of the left leg joint", 
                    "angle of the left foot joint", # some modification since the documentation is a mess
                    "velocity of the x-coordinate of the torso", 
                    "velocity of the z-coordinate (height) of the torso",
                    "angular velocity of the angle of the torso",
                    "angular velocity of the thigh hinge",
                    "angular velocity of the leg hinge",
                    "angular velocity of the foot hinge",
                    "angular velocity of the left left thigh hinge",
                    "angular velocity of the left leg hinge",
                    "angular velocity of the left foot hinge",
                    ],
        "action": ["Torque applied on the thigh rotor", 
                    "Torque applied on the leg rotor", 
                    "Torque applied on the foot rotor", 
                    "Torque applied on the left thigh rotor", 
                    "Torque applied on the left leg rotor", 
                    "Torque applied on the left foot rotor", 
                    ],
        "reward": ["healthy_reward: Every timestep that the walker is alive, it receives a fixed reward of value healthy_reward.",
                    "forward_reward: A reward of walking forward which is measured as forward_reward_weight * (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependeent on the frame_skip parameter (default is 4), where the frametime is 0.002 - making the default dt = 4 * 0.002 = 0.008. This reward would be positive if the walker walks forward (positive x direction).",
                    "ctrl_cost: A cost for penalising the walker if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctrl_cost_weight is a parameter set for the control and has a default value of 0.001.",
                    "The total reward returned is reward = healthy_reward bonus + forward_reward - ctrl_cost."],
        "other": [""] ## TODO: Add more here
    },
    "walker2d-medium-expert-v2":{
        "description": "The walker is a two-dimensional two-legged figure that consist of seven main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to walk in the in the forward (right) direction by applying torques on the six hinges connecting the seven body parts.",
        "state": ["z-coordinate of the torso (height of Walker2d)", 
                    "angle of the torso", 
                    "angle of the thigh joint", 
                    "angle of the leg joint", 
                    "angle of the foot joint", 
                    "angle of the left thigh joint", 
                    "angle of the left leg joint", 
                    "angle of the left foot joint", # some modification since the documentation is a mess
                    "velocity of the x-coordinate of the torso", 
                    "velocity of the z-coordinate (height) of the torso",
                    "angular velocity of the angle of the torso",
                    "angular velocity of the thigh hinge",
                    "angular velocity of the leg hinge",
                    "angular velocity of the foot hinge",
                    "angular velocity of the left left thigh hinge",
                    "angular velocity of the left leg hinge",
                    "angular velocity of the left foot hinge",
                    ],
        "action": ["Torque applied on the thigh rotor", 
                    "Torque applied on the leg rotor", 
                    "Torque applied on the foot rotor", 
                    "Torque applied on the left thigh rotor", 
                    "Torque applied on the left leg rotor", 
                    "Torque applied on the left foot rotor", 
                    ],
        "reward": ["healthy_reward: Every timestep that the walker is alive, it receives a fixed reward of value healthy_reward.",
                    "forward_reward: A reward of walking forward which is measured as forward_reward_weight * (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependeent on the frame_skip parameter (default is 4), where the frametime is 0.002 - making the default dt = 4 * 0.002 = 0.008. This reward would be positive if the walker walks forward (positive x direction).",
                    "ctrl_cost: A cost for penalising the walker if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctrl_cost_weight is a parameter set for the control and has a default value of 0.001.",
                    "The total reward returned is reward = healthy_reward bonus + forward_reward - ctrl_cost."],
        "other": [""] ## TODO: Add more here
    },
    "walker2d-medium-replay-v2":{
        "description": "The walker is a two-dimensional two-legged figure that consist of seven main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to walk in the in the forward (right) direction by applying torques on the six hinges connecting the seven body parts.",
        "state": ["z-coordinate of the torso (height of Walker2d)", 
                    "angle of the torso", 
                    "angle of the thigh joint", 
                    "angle of the leg joint", 
                    "angle of the foot joint", 
                    "angle of the left thigh joint", 
                    "angle of the left leg joint", 
                    "angle of the left foot joint", # some modification since the documentation is a mess
                    "velocity of the x-coordinate of the torso", 
                    "velocity of the z-coordinate (height) of the torso",
                    "angular velocity of the angle of the torso",
                    "angular velocity of the thigh hinge",
                    "angular velocity of the leg hinge",
                    "angular velocity of the foot hinge",
                    "angular velocity of the left left thigh hinge",
                    "angular velocity of the left leg hinge",
                    "angular velocity of the left foot hinge",
                    ],
        "action": ["Torque applied on the thigh rotor", 
                    "Torque applied on the leg rotor", 
                    "Torque applied on the foot rotor", 
                    "Torque applied on the left thigh rotor", 
                    "Torque applied on the left leg rotor", 
                    "Torque applied on the left foot rotor", 
                    ],
        "reward": ["healthy_reward: Every timestep that the walker is alive, it receives a fixed reward of value healthy_reward.",
                    "forward_reward: A reward of walking forward which is measured as forward_reward_weight * (x-coordinate before action - x-coordinate after action)/dt. dt is the time between actions and is dependeent on the frame_skip parameter (default is 4), where the frametime is 0.002 - making the default dt = 4 * 0.002 = 0.008. This reward would be positive if the walker walks forward (positive x direction).",
                    "ctrl_cost: A cost for penalising the walker if it takes actions that are too large. It is measured as ctrl_cost_weight * sum(action ^ 2) where ctrl_cost_weight is a parameter set for the control and has a default value of 0.001.",
                    "The total reward returned is reward = healthy_reward bonus + forward_reward - ctrl_cost."],
        "other": [""] ## TODO: Add more here
    },
}